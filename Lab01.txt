{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#1 Verify if a value is integer\n",
    "\n",
    "a = 9\n",
    "a==int(a)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#2 Verify if a value is even\n",
    "\n",
    "a = 4\n",
    "a % 2 == 0\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#3 Insert two numbers. Is the first is bigger than the second?\n",
    "\n",
    "a = 6\n",
    "b = 5\n",
    "a > b\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "True"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#4 Verify if one value is multiple of another\n",
    "\n",
    "a = 40\n",
    "b = 20\n",
    "\n",
    "n = a/b \n",
    "int(n) == n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18.0\n"
     ]
    }
   ],
   "source": [
    "#5 Calculate the interest earn by an investor that invested a capital of 200 during 3 years with an interest rate of 3%.\n",
    "\n",
    "capital = 200\n",
    "time = 3\n",
    "rate = 0.03\n",
    "\n",
    "interest = capital*time*rate\n",
    "print(interest)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "218.5454\n"
     ]
    }
   ],
   "source": [
    "#6 Capital that an investor obtained after investing a capital of 200 during 3 years with an interest rate of 3%.\n",
    "\n",
    "capital = 200\n",
    "time = 3\n",
    "rate = 0.03\n",
    "\n",
    "accrued_capital = capital*(1+rate)**time\n",
    "print(accrued_capital)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "23.437499999999996\n"
     ]
    }
   ],
   "source": [
    "#7 Calculate your BMI (Body Mass Index)\n",
    "## BMI=MASS(KG)/HEIGHT^2(M)\n",
    "\n",
    "mass = 60\n",
    "height = 1.60\n",
    "\n",
    "BMI = mass/(height**2)\n",
    "print(BMI)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.618033988749895\n"
     ]
    }
   ],
   "source": [
    "#8 Calcule the Golden ration:\n",
    "## 1. Solve the problem without using libraries\n",
    "\n",
    "gr=(1+(5**(1/2)))/2\n",
    "print(gr)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.618033988749895\n"
     ]
    }
   ],
   "source": [
    "#8 Calcule the Golden ration:\n",
    "## 2. Use module math (import math) and function sqr (math.sqrt)\n",
    "\n",
    "import math\n",
    "gr = (1 + (math.sqrt(5)))/2\n",
    "\n",
    "print(gr)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3139.440301519393\n"
     ]
    }
   ],
   "source": [
    "#9 Calculete the NPV (Net present value) of an investment, considering an initial investment of 10000, the following Cashflows 2000,3000, 4000, 4000 and 5000 and a discount rate of 10%\n",
    "\n",
    "initial_investment = 10000\n",
    "CF1 = 2000\n",
    "CF2 = 3000\n",
    "CF3 = 4000\n",
    "CF4 = 4000\n",
    "CF5 = 5000\n",
    "k = 0.10\n",
    "\n",
    "FV1 = CF1/((1+k)**1)\n",
    "FV2 = CF2/((1+k)**2)\n",
    "FV3 = CF3/((1+k)**3)\n",
    "FV4 = CF4/((1+k)**4)\n",
    "FV5 = CF5/((1+k)**5)\n",
    "\n",
    "NPV = FV1+FV2+FV3+FV4+FV5 - initial_investment\n",
    "print(NPV)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What´s your name? Cristiana\n",
      "How old are you? 21\n",
      "You were born in:  1998\n"
     ]
    }
   ],
   "source": [
    "#10 Ask the user to insert name and age. Calculate the the birth. Print a result saying the 'this person was born in'\n",
    "## 1. Solve the problem without using modules and libraries\n",
    "\n",
    "name = input('What´s your name? ')\n",
    "age = input('How old are you? ')\n",
    "\n",
    "date_birth = 2019 - int(age)\n",
    "print('You were born in: ', date_birth)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What´s your name? Tiago\n",
      "How old are you? 21\n",
      "You were born in:  1998\n"
     ]
    }
   ],
   "source": [
    "#10 Ask the user to insert name and age. Calculate the the birth. Print a result saying the 'this person was born in'\n",
    "## 2. Solve the problem using the date library from module datetime.\n",
    "\n",
    "from datetime import date\n",
    "today = date.today()\n",
    "today.year\n",
    "\n",
    "\n",
    "name = input('What´s your name? ')\n",
    "age = input('How old are you? ')\n",
    "\n",
    "birth = today.year - int(age)\n",
    "\n",
    "print('You were born in: ', birth)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "What's your first name? Cris\n",
      "What's your forenames? Amaral\n",
      "What's your surname? Correia\n",
      "Your complete name is:  Cris Amaral Correia\n"
     ]
    }
   ],
   "source": [
    "#11 Ask the user to insert forenames, surnames. create a new variable (name) with your complete name.\n",
    "\n",
    "first_name = input(\"What's your first name? \")\n",
    "forenames = input(\"What's your forenames? \")\n",
    "surname = input(\"What's your surname? \")\n",
    "\n",
    "complete_name = first_name + \" \" + forenames + \" \" + surname\n",
    "print(\"Your complete name is: \", complete_name)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'sub' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-6a73799c770d>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[1;31m#12 Use the following method to show where in which carater appears the firs \"da\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m \u001b[0mstr\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msub\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mstart\u001b[0m\u001b[1;33m,\u001b[0m\u001b[0mend\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'sub' is not defined"
     ]
    }
   ],
   "source": [
    "#12 Use the following method to show where in which carater appears the firs \"da\"\n",
    "\n",
    "str.find(sub,start,end)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
